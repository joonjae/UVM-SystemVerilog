$date
	Sat Dec 10 01:13:42 2022
$end
$version
	QuestaSim Version 10.6c
$end
$timescale
	1ns
$end

$scope module uvm_root $end
$upscope $end

$scope module tb $end

$scope module dut $end
$var wire 1 ! a [3] $end
$var wire 1 " a [2] $end
$var wire 1 # a [1] $end
$var wire 1 $ a [0] $end
$var wire 1 % b [3] $end
$var wire 1 & b [2] $end
$var wire 1 ' b [1] $end
$var wire 1 ( b [0] $end
$var wire 1 ) y [4] $end
$var wire 1 * y [3] $end
$var wire 1 + y [2] $end
$var wire 1 , y [1] $end
$var wire 1 - y [0] $end
$upscope $end
$upscope $end

$scope begin uvm_pkg $end
$var parameter 32 . UVM_HDL_MAX_WIDTH $end
$var parameter 32 / UVM_STREAMBITS $end
$var parameter 32 0 UVM_RADIX $end
$var parameter 32 1 UVM_MACRO_NUMFLAGS $end
$var parameter 32 2 UVM_DEFAULT $end
$var parameter 32 3 UVM_ALL_ON $end
$var parameter 32 4 UVM_FLAGS_ON $end
$var parameter 32 5 UVM_FLAGS_OFF $end
$var parameter 32 6 UVM_COPY $end
$var parameter 32 7 UVM_NOCOPY $end
$var parameter 32 8 UVM_COMPARE $end
$var parameter 32 9 UVM_NOCOMPARE $end
$var parameter 32 : UVM_PRINT $end
$var parameter 32 ; UVM_NOPRINT $end
$var parameter 32 < UVM_RECORD $end
$var parameter 32 = UVM_NORECORD $end
$var parameter 32 > UVM_PACK $end
$var parameter 32 ? UVM_NOPACK $end
$var parameter 32 @ UVM_PHYSICAL $end
$var parameter 32 A UVM_ABSTRACT $end
$var parameter 32 B UVM_READONLY $end
$var parameter 32 C UVM_NODEFPRINT $end
$var parameter 32 D UVM_MACRO_EXTRAS $end
$var parameter 32 E UVM_FLAGS $end
$var parameter 32 F UVM_UNPACK $end
$var parameter 32 G UVM_CHECK_FIELDS $end
$var parameter 32 H UVM_END_DATA_EXTRA $end
$var parameter 32 I UVM_START_FUNCS $end
$var parameter 32 J UVM_SET $end
$var parameter 32 K UVM_SETINT $end
$var parameter 32 L UVM_SETOBJ $end
$var parameter 32 M UVM_SETSTR $end
$var parameter 32 N UVM_END_FUNCS $end
$var parameter 32 O UVM_STR_CRC_POLYNOMIAL $end
$var parameter 32 P UVM_STDOUT $end
$var parameter 32 Q UVM_LINE_WIDTH $end
$var parameter 32 R UVM_NUM_LINES $end
$var parameter 32 S UVM_SMALL_STRING $end
$var parameter 32 T UVM_LARGE_STRING $end
$var reg 1 U uvm_start_uvm_declarations $end
$var integer 32 V uvm_global_random_seed $end
$var integer 32 W UVM_UNBOUNDED_CONNECTIONS $end

$scope function uvm_hdl_check_path $end
$var integer 32 X uvm_hdl_check_path $end
$upscope $end

$scope function uvm_hdl_deposit $end
$var integer 32 Y uvm_hdl_deposit $end
$var reg 1024 Z value [1023:0] $end
$upscope $end

$scope function uvm_hdl_force $end
$var integer 32 [ uvm_hdl_force $end
$var reg 1024 \ value [1023:0] $end
$upscope $end

$scope task uvm_hdl_force_time $end
$var reg 1024 ] value [1023:0] $end
$var time 64 ^ force_time $end
$upscope $end

$scope function uvm_hdl_release_and_read $end
$var integer 32 _ uvm_hdl_release_and_read $end
$var reg 1024 ` value [1023:0] $end
$upscope $end

$scope function uvm_hdl_release $end
$var integer 32 a uvm_hdl_release $end
$upscope $end

$scope function uvm_hdl_read $end
$var integer 32 b uvm_hdl_read $end
$var reg 1024 c value [1023:0] $end
$upscope $end

$scope function uvm_dpi_get_next_arg_c $end
$upscope $end

$scope function uvm_dpi_get_tool_name_c $end
$upscope $end

$scope function uvm_dpi_get_tool_version_c $end
$upscope $end

$scope function uvm_dpi_get_next_arg $end
$upscope $end

$scope function uvm_dpi_get_tool_name $end
$upscope $end

$scope function uvm_dpi_get_tool_version $end
$upscope $end

$scope function uvm_dpi_regcomp $end
$upscope $end

$scope function uvm_dpi_regexec $end
$var integer 32 d uvm_dpi_regexec $end
$upscope $end

$scope function uvm_dpi_regfree $end
$upscope $end

$scope function uvm_re_match $end
$var integer 32 e uvm_re_match $end
$upscope $end

$scope function uvm_dump_re_cache $end
$upscope $end

$scope function uvm_glob_to_re $end
$upscope $end

$scope function uvm_revision_string $end
$upscope $end

$scope function uvm_radix_to_string $end
$var integer 32 f radix $end
$upscope $end

$scope function uvm_instance_scope $end
$var reg 8 g c [7:0] $end
$var integer 32 h pos $end
$upscope $end

$scope function uvm_oneway_hash $end
$var integer 32 i uvm_oneway_hash $end
$var integer 32 j seed $end
$var reg 1 k msb $end
$var reg 8 l current_byte [7:0] $end
$var reg 32 m crc1 [31:0] $end
$upscope $end

$scope function uvm_create_random_seed $end
$var integer 32 n uvm_create_random_seed $end
$upscope $end

$scope function uvm_object_value_str $end
$upscope $end

$scope function uvm_leaf_scope $end
$var reg 8 o scope_separator [7:0] $end
$var reg 8 p bracket_match [7:0] $end
$var integer 32 q pos $end
$var integer 32 r bmatches $end
$upscope $end

$scope function uvm_vector_to_string $end
$var reg 4096 s value [4095:0] $end
$var integer 32 t size $end
$var integer 32 u radix $end
$upscope $end

$scope function uvm_get_array_index_int $end
$var integer 32 v uvm_get_array_index_int $end
$var reg 1 w is_wildcard $end
$var integer 32 x i $end
$upscope $end

$scope function uvm_get_array_index_string $end
$var reg 1 y is_wildcard $end
$var integer 32 z i $end
$upscope $end

$scope function uvm_is_array $end
$var reg 1 { uvm_is_array $end
$upscope $end

$scope function uvm_has_wildcard $end
$upscope $end

$scope task run_test $end
$upscope $end

$scope function global_stop_request $end
$upscope $end

$scope function set_global_timeout $end
$var time 64 | timeout $end
$var reg 1 } overridable $end
$upscope $end

$scope function set_global_stop_timeout $end
$var time 64 ~ timeout $end
$upscope $end

$scope function uvm_report_enabled $end
$var reg 1 !! uvm_report_enabled $end
$var integer 32 "! verbosity $end
$var reg 2 #! severity [1:0] $end
$upscope $end

$scope function uvm_report $end
$var reg 2 $! severity [1:0] $end
$var integer 32 %! verbosity $end
$var integer 32 &! line $end
$upscope $end

$scope function uvm_report_info $end
$var integer 32 '! verbosity $end
$var integer 32 (! line $end
$upscope $end

$scope function uvm_report_warning $end
$var integer 32 )! verbosity $end
$var integer 32 *! line $end
$upscope $end

$scope function uvm_report_error $end
$var integer 32 +! verbosity $end
$var integer 32 ,! line $end
$upscope $end

$scope function uvm_report_fatal $end
$var integer 32 -! verbosity $end
$var integer 32 .! line $end
$upscope $end

$scope function uvm_string_to_severity $end
$var reg 1 /! uvm_string_to_severity $end
$var reg 2 0! sev [1:0] $end
$upscope $end

$scope function uvm_string_to_action $end
$upscope $end

$scope function set_config_int $end
$var reg 4096 1! value [4095:0] $end
$upscope $end

$scope function set_config_object $end
$var reg 1 2! clone $end
$upscope $end

$scope function set_config_string $end
$upscope $end

$scope function uvm_is_match $end
$var reg 1 3! uvm_is_match $end
$upscope $end

$scope function uvm_string_to_bits $end
$var reg 115200 4! uvm_string_to_bits [115199:0] $end
$upscope $end

$scope function uvm_bits_to_string $end
$var reg 115200 5! str [115199:0] $end
$upscope $end

$scope task uvm_wait_for_nba_region $end
$var integer 32 6! nba $end
$var integer 32 7! next_nba $end
$upscope $end

$scope function uvm_split_string $end
$upscope $end

$scope function uvm_hdl_concat2string $end
$upscope $end
$upscope $end

$scope begin tb18_sv_unit $end
$upscope $end

$scope begin std $end
$upscope $end

$scope begin questa_uvm_pkg $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0y
0{
0/!
b0 0!
bx 4!
bx 5!
bx Z
bx \
bx ]
bx `
bx c
1U
0k
b1110100 l
b1000110110110111000011000110100 m
bx s
0w
0}
0!!
b0 #!
b0 $!
bx 1!
02!
03!
b10000000000 .
b1000000000000 /
b1111000000000000000000000000 0
b10001 1
b10101010101 2
b101010101 3
b101010101 4
b0 5
b1 6
b10 7
b100 8
b1000 9
b10000 :
b100000 ;
b1000000 <
b10000000 =
b100000000 >
b1000000000 ?
b10000000000000 @
b100000000000000 A
b1000000000000000 B
b10000000000000000 C
b100000000000000000 D
b100000000000000001 E
b100000000000000010 F
b100000000000000011 G
b100000000000000100 H
b100000000000000101 I
b100000000000000110 J
b100000000000000110 K
b100000000000000111 L
b100000000000001000 M
b100000000000001000 N
b100110000010001110110110110 O
b1 P
b1111000 Q
b1111000 R
b1110111111 S
b11100000111111111 T
b0 f
b0 o
b0 p
b0 q
b0 r
b0 z
b0 X
b0 Y
b0 [
b0 _
b0 a
b0 b
b1 d
b0 e
b1101001011000001111100000011110 V
b101110 g